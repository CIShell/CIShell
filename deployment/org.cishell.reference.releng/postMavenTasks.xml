<?xml version="1.0" encoding="UTF-8"?>
<project name="addAntBuiltPlugins" default="build">
	<property name="product.name" relative="true">cishell</property>
	<property name="input.dir" relative="true">${basedir}/target/products</property>
	<property name="output.dir" relative="true">${basedir}/target/products-final</property>
	<property name="deploy.dir" relative="false">/projects/cishell/www/htdocs/nightly/</property>
	<property name="p2.dest" relative="false">${deploy.dir}/../p2/</property>
	<property name="p2.src">deployment/org.cishell.reference.releng/target/repository</property>
	<property name="product.version">2.0.0</property>
	<property name="product.build.type">custom</property>
	<!-- permission.files defined files which the executable bit need to be enable at Mac and Linux. -->
	<property name="permission.files">**/${product.name}</property>

	<!-- source: http://stackoverflow.com/questions/945374/how-to-pull-out-a-substring-in-ant -->
	<scriptdef name="substring" language="javascript">
     <attribute name="text" />
     <attribute name="start" />
     <attribute name="end" />
     <attribute name="property" />
     <![CDATA[
       var text = attributes.get("text");
       var start = attributes.get("start");
       var end = attributes.get("end") || text.length();
       var propertyToSet = attributes.get("property");
       project.setProperty(propertyToSet, text.substring(start, end));
     ]]>
  	</scriptdef>
	
	<target name="build">
		<echo>
			Before this will work, you will need to add the 
			[Ant-Contrib](http://ant-contrib.sourceforge.net/)
			library to Ant. See README for more information.
		</echo>
		
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
		<delete dir="${output.dir}" />
		<mkdir dir="${output.dir}" />

		<foreach target="each-product-zip" param="product.zip">
			<path>
				<fileset dir="${input.dir}" includes="${product.name}-win32*.zip" />
			</path>
		</foreach>
	
		<foreach target="each-product-tgz" param="product.zip">
			<path>
				<fileset dir="${input.dir}" includes="${product.name}-macosx*.zip ${product.name}-linux*.zip" />
			</path>
		</foreach>
	</target>
	
	
	
	<target name="deploy">
		<tstamp/>
		
		<!-- Pull out the first letter of the build type -->
		<substring property="product.build.type.short"
			start="0" end="1" text="${product.build.type}" />
			
		<copy todir="${deploy.dir}/${product.version}.${DSTAMP}${TSTAMP}${product.build.type}">
			<fileset dir="${output.dir}" />
			<mapper>
				<!-- Don't blame me, I didn't make up the file name convention. -->
				<regexpmapper 
					casesensitive="false"
					from="${product.name}-(.*)"
					to="${product.name}-${product.build.type.short}-${product.version}.${DSTAMP}${TSTAMP}${product.build.type}-\1" />
			</mapper>
		</copy>
	</target>

	<target name="each-product-zip">
		<basename property="product.filename" file="${product.zip}" />
		<property name="product.zip.out">${output.dir}/${product.filename}</property>
		<echo>Going to use ${product.zip} to make ${product.zip.out}</echo>

		<tempfile property="temp.dir" />
		<mkdir dir="${temp.dir}" />

		<unzip src="${product.zip}" dest="${temp.dir}">
			<patternset>
				<include name="**/configuration/config.ini" />
			</patternset>
		</unzip>

		<!-- Tycho / Eclipse don't honor this option if you set it to true in the .product definition file. You have to change it after the fact. *pout* -->
		<replaceregexp match="org\.eclipse\.update\.reconcile=false" replace="org\.eclipse\.update\.reconcile=true">
			<fileset dir="${temp.dir}" includes="**/configuration/config.ini" />
		</replaceregexp>

		<zip destfile="${product.zip.out}" duplicate="fail">
			<zipfileset src="${product.zip}" excludes="**/configuration/config.ini" />
			<zipfileset dir="${temp.dir}" includes="**/*.ini" />
		</zip>
		<delete dir="${temp.dir}" />
	</target>
	
	<target name="each-product-tgz">
		<basename property="product.filename" file="${product.zip}" />
		<propertyregex property="output.filename" input="${product.filename}" regexp=".zip" replace=".tgz" />
		<property name="product.tgz.out">${output.dir}/${output.filename}</property>
		<echo>Going to use ${product.zip} to make ${product.tgz.out}</echo>

		<tempfile property="temp.dir" />
		<mkdir dir="${temp.dir}" />

		<unzip src="${product.zip}" dest="${temp.dir}" >
			<patternset>
				<include name="**/configuration/config.ini" />
			</patternset>
		</unzip>

		<!-- Tycho / Eclipse don't honor this option if you set it to true in the .product definition file. You have to change it after the fact. *pout* -->
		<replaceregexp match="org\.eclipse\.update\.reconcile=false" replace="org\.eclipse\.update\.reconcile=true">
			<fileset dir="${temp.dir}" includes="**/configuration/config.ini" />
		</replaceregexp>
	
		<tar destfile="${product.tgz.out}" compression="gzip">
			<zipfileset src="${product.zip}" excludes="**/configuration/config.ini ${permission.files}" />
			<zipfileset src="${product.zip}" includes="${permission.files}" filemode="755" />
			<zipfileset dir="${temp.dir}" includes="**/*.ini" />
		</tar>

		<delete dir="${temp.dir}" />
	</target>
	
	<!-- This will deploy the p2 repositories --> 
	<target name="deploy-p2">
		<!-- Deploy the nightly p2 -->
		<property name="nightly.p2.dest">${p2.dest}nightly-repo/</property>
	    <echo message="Making nightly p2 by copying from ${p2.src} to ${nightly.p2.dest}..."/>
	    <!-- delete the dest dir if it exists -->
	    <if>
	        <available file="${nightly.p2.dest}" type="dir" />
			<then>	
				  <echo message="Deleting previous nightly p2 folder"/>
		          <delete includeEmptyDirs="true">
			    <fileset dir="${nightly.p2.dest}" includes="**/*"/>
			  </delete>
			</then>
	    </if>
	    
	    <!-- copy the contents over -->
	    <move todir="${nightly.p2.dest}">
	      <fileset dir="${p2.src}"/>
	    </move>
		<echo message="Finished copying the nightly p2."/>
	  </target>
	
</project>